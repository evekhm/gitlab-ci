#
# IMPORTANT: Do not rename this file or move to another folder. Doing so would
#            break the CI pipelines of projects that "include:" this file.
#
include:
  .gitlab-ci-build-vars.yml

variables:
  SECRET: regcred # used for the secret to access Images stored in Gitlab from the GKE

stages:
- deploy

image: google/cloud-sdk

.kube-context:
  before_script:
  - echo "Setting KUBE_CONTEXT to $KUBE_CONTEXT"
  - if [ -n "$KUBE_CONTEXT" ]; then kubectl config use-context "$KUBE_CONTEXT"; fi
  - kubectl config current-context

# Depends on GITLAB_AUTH - File defined inside Project Settings->CI/CD
# Generated using:
# docker login -u <user_name> -p <gitlab_access_token> registry.gitlab.com
# cat $HOME/.docker/config.json
.prepare_cluster: &prepare_cluster
# Create Secret if not existing to PullImages from GitLab
- |
  if [ -n "$NAMESPACE" ]; then
    kubectl get namespace "$NAMESPACE" 2>/dev/null || kubectl create namespace "$NAMESPACE"
    if kubectl get secrets --namespace=$NAMESPACE | grep $SECRET; then
      echo "$SECRET exists in namespace $NAMESPACE, skipping..."
    else
      kubectl create secret generic $SECRET --from-file=.dockerconfigjson=${GITLAB_AUTH} --type=kubernetes.io/dockerconfigjson --namespace=$NAMESPACE
    fi
  fi

.echo: &echo
- echo CI_REGISTRY=$CI_REGISTRY
- echo KUBE_CONTEXT=$KUBE_CONTEXT
- echo ENVIRONMENT = $ENVIRONMENT
- echo IMAGE = $IMAGE
- echo NAMESPACE = $NAMESPACE
- echo KUBE_CONTEXT=$KUBE_CONTEXT
- echo UPSTREAM_PROJECT_NAME = $UPSTREAM_PROJECT_NAME
- echo UPSTREAM_PROJECT_PATH = $UPSTREAM_PROJECT
- echo Patching image $IMAGE of application $UPSTREAM_PROJECT_NAME, using $ENVIRONMENT environment and $NAMESPACE namespace
- echo CI_COMMIT_BRANCH = $CI_COMMIT_BRANCH
- echo CI_MERGE_REQUEST_SOURCE_BRANCH_SHA = $CI_MERGE_REQUEST_SOURCE_BRANCH_SHA
- echo CI_PIPELINE_SOURCE = $CI_PIPELINE_SOURCE
- echo CI_PIPELINE_TRIGGERED = $CI_PIPELINE_TRIGGERED
- echo PIPELINE_TRIGGERED = $PIPELINE_TRIGGERED


# Runs Pathcing based on the Application Build Image Trigger. Path to the Image, Namespace and Application are passed through the pipeline.
.cluster_patch: &cluster_patch
- echo "Patching image $IMAGE of application $APPLICATION"
- if [ -n "$CI_COMMIT_BRANCH" ]; then echo source branch is  $CI_COMMIT_BRANCH; fi
- if [ -n "$CI_MERGE_REQUEST_SOURCE_BRANCH_SHA" ]; then echo triggered my merge Request $CI_MERGE_REQUEST_SOURCE_BRANCH_SHA; fi
- APPLY="${CI_PROJECT_DIR}/applications/${APPLICATION}/gcp/apply.sh"
- APPLICATION=$APPLICATION IMAGE=$IMAGE KUBE_NAMESPACE=$NAMESPACE bash $APPLY
- kubectl get pods -n "$NAMESPACE"

# Pipeline was triggered - check the branch
patch:
  stage: deploy
  environment:
    name: $ENVIRONMENT
  extends: [ .kube-context ]
  script:
  - APPLICATION=$UPSTREAM_PROJECT_NAME
  - *echo
  - *prepare_cluster
  - *cluster_patch
  rules:
  - if: '$PIPELINE_TRIGGERED == null'
    when: never
  - !reference [.build_vars, rules]


.deploy_applications: &deploy_applications
- *echo
- *prepare_cluster
- kubectl get pods -n "$NAMESPACE"
- kubectl config view
- kubectl config current-context
# Check if Container Image Exists, by setting IMAGE_EXISTS to 'true' or 'false'.
# via https://gitlab.com/gitlab-org/gitlab-foss/issues/26866#note_97609397
- mkdir -p ~/.docker
- "echo '{\"experimental\": \"enabled\"}' > ~/.docker/config.json"
- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
-  |
  for dir in ${CI_PROJECT_DIR}/applications/*/
  do
      APPLICATION=$(basename ${dir%*/})
      IMAGE="${APP_REPO}/${APPLICATION}/${REPO_SUB:-}${IMAGE_TYPE}"
      IMAGE_RELEASED="${APP_REPO}/${APPLICATION}/${RELEASED}"
      echo IMAGE=$IMAGE, IMAGE_RELEASED=$IMAGE_RELEASED
      docker manifest inspect $IMAGE > /dev/null 2>&1 && IMAGE_EXISTS=0 || IMAGE_EXISTS=1
      echo $IMAGE, $IMAGE_EXISTS
      if [ $IMAGE_EXISTS -eq '1' ]; then
          docker manifest inspect $IMAGE_RELEASED > /dev/null 2>&1 && IMAGE_EXISTS=0 || IMAGE_EXISTS=1
          if [ $IMAGE_EXISTS -eq '0' ]; then IMAGE=$IMAGE_RELEASED; fi
      fi
      echo $IMAGE, $IMAGE_EXISTS
      APPLY="${CI_PROJECT_DIR}/applications/${APPLICATION}/gcp/apply.sh"
      APPLICATION=$APPLICATION IMAGE=$IMAGE KUBE_NAMESPACE=$NAMESPACE bash $APPLY
  done
- kubectl get pods -n "$NAMESPACE"


.deploy:
  stage: deploy
  extends: [.kube-context ]
  script:
  - set -x
  - export ENVIRONMENT=$CI_ENVIRONMENT_NAME
  - echo CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH
  - echo CI_MERGE_REQUEST_SOURCE_BRANCH_NAME=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME #for the feature, Application images are stored in the 'feature_name path
  - export REPO_SUB=${CI_COMMIT_BRANCH:-$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}/
  - echo REPO_SUB=$REPO_SUB
  - *deploy_applications

deploy_main:
  environment: demo
  rules:
  - if: $PIPELINE_TRIGGERED #exclude patching triggered
    when: never
  - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == "merge_request_event" #exclude when commit NOT to a main branch
    when: never
  - !reference [.build_vars, rules]
  extends: [.deploy ]

deploy_mr:
  environment: test
  rules:
  - if: $PIPELINE_TRIGGERED #exclude patching triggered
    when: never
  - if: $CI_PIPELINE_SOURCE != "merge_request_event" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH #exclude when NOT a MR or MR not to the main branch
    when: never
  - !reference [.build_vars, rules]
  extends: [.deploy ]

deploy_dev:
  environment: development
  rules:
  - if: $PIPELINE_TRIGGERED #exclude patching triggered
    when: never
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH #exclude MR and demo
    when: never
  - !reference [.build_vars, rules]
  extends: [.deploy ]