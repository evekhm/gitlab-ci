#
# IMPORTANT: Do not rename this file or move to another folder. Doing so would
#            break the CI pipelines of projects that "include:" this file.
#
include:
- local: /.gitlab/ci/.build-vars.gitlab-ci.yml

variables:
  SECRET: regcred # used for the secret to access Images stored in Gitlab from the GKE
  DEPLOY_SCRIPT: "gitlab-ci/deploy.sh"
  PRE_DEPLOY_SCRIPT: "gitlab-ci/prepare.sh"

stages:
- prepare
- deploy
- destroy

image: google/cloud-sdk

.kube-context:
  before_script:
  - set -x
  # Temp fix fir missing SLUG for CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
  - export KUBE_NAMESPACE="$(printf "${KUBE_NAMESPACE}" | tr -c 'a-zA-Z0-9_.-' - | sed 's/^[.-]*//' | cut -c -128 | tr '[:upper:]' '[:lower:]')"
  - echo "$KUBE_NAMESPACE"
  - |
    if [ -n "$KUBE_CONTEXT" ]; then
        echo "Setting KUBE_CONTEXT to $KUBE_CONTEXT"
        kubectl config use-context "$KUBE_CONTEXT"
        kubectl config current-context
        kubectl get pods -n "$KUBE_NAMESPACE"
    fi

# Using Gitlab deploy token to access Private Repository:
# https://docs.gitlab.com/ee/user/project/deploy_tokens/index.html#gitlab-deploy-token
# https://docs.gitlab.com/ee/user/project/deploy_tokens/
# When using Group deploy token, following needs to be added manually for the DeployApplication projects:  $CI_DEPLOY_USER,  $CI_DEPLOY_PASSWORD
# See https://docs.gitlab.com/ee/user/project/deploy_tokens/index.html#group-deploy-token
.create_secret: &create_secret
- |
  echo "Creating secret $SECRET in namespace $KUBE_NAMESPACE required for private repository access"
  if kubectl get secrets --namespace=$KUBE_NAMESPACE | grep $SECRET; then
    echo "$SECRET exists in namespace $KUBE_NAMESPACE, skipping..."
  else
    echo "Logging into $CI_REGISTRY with deploy token $CI_DEPLOY_USER"
    docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    kubectl create secret generic $SECRET --from-file=.dockerconfigjson=$HOME/.docker/config.json --type=kubernetes.io/dockerconfigjson --namespace=$KUBE_NAMESPACE
    kubectl get secrets --namespace=$KUBE_NAMESPACE | grep $SECRET
  fi



.prepare_cluster: &prepare
- if [ -n "$KUBE_NAMESPACE" ]; then kubectl get namespace "$KUBE_NAMESPACE" 2>/dev/null || kubectl create namespace "$KUBE_NAMESPACE"; fi
- *create_secret
- |
  if [ -f ${CI_PROJECT_DIR}/${PRE_DEPLOY_SCRIPT} ]; then
    echo "Running pre-deploy step with APPLICATION=$APPLICATION IMAGE=$IMAGE KUBE_NAMESPACE=$KUBE_NAMESPACE ENVIRONMENT=$ENVIRONMENT"
    APPLICATION=$APPLICATION IMAGE=$IMAGE KUBE_NAMESPACE=$KUBE_NAMESPACE ENVIRONMENT=$ENVIRONMENT bash ${CI_PROJECT_DIR}/${PRE_DEPLOY_SCRIPT}
  else
    echo "Skipping deploy step since ${CI_PROJECT_DIR}/${PRE_DEPLOY_SCRIPT} does not exist"
  fi


.echo: &echo
- echo KUBE_CONTEXT = $KUBE_CONTEXT
- echo ENVIRONMENT = $ENVIRONMENT
- echo IMAGE = $IMAGE
- echo PROJECT_ID = $PROJECT_ID
- echo KUBE_NAMESPACE = $KUBE_NAMESPACE
- echo APPLICATION = $APPLICATION
- echo UPSTREAM_PROJECT_PATH = $UPSTREAM_PROJECT_PATH
- echo UPSTREAM_PROJECT_NAME = $UPSTREAM_PROJECT_NAME
- echo CI_COMMIT_BRANCH = $CI_COMMIT_BRANCH
- echo CI_DEFAULT_BRANCH = $CI_DEFAULT_BRANCH
- echo CI_MERGE_REQUEST_SOURCE_BRANCH_SHA = $CI_MERGE_REQUEST_SOURCE_BRANCH_SHA
- echo CI_PIPELINE_SOURCE = $CI_PIPELINE_SOURCE
- echo CI_PIPELINE_TRIGGERED = $CI_PIPELINE_TRIGGERED
- echo PIPELINE_TRIGGERED = $PIPELINE_TRIGGERED
- echo CI_UPSTREAM_PIPELINE_SOURCE = $CI_UPSTREAM_PIPELINE_SOURCE

# Runs Patching based on the Application Build Image Trigger. Path to the Image, Namespace and Application are passed through the pipeline.
.cluster_patch: &cluster_patch
- echo "Patching image $IMAGE of application $APPLICATION in environment $ENVIRONMENT with namespace $KUBE_NAMESPACE"
- if [ -n "$CI_COMMIT_BRANCH" ]; then echo source branch is  $CI_COMMIT_BRANCH; fi
- if [ -n "$CI_MERGE_REQUEST_SOURCE_BRANCH_SHA" ]; then echo triggered by merge Request $CI_MERGE_REQUEST_SOURCE_BRANCH_SHA; fi
- |
  if [ -f ${CI_PROJECT_DIR}/${DEPLOY_SCRIPT} ]; then
    echo "Running deploy step with APPLICATION=$APPLICATION IMAGE=$IMAGE KUBE_NAMESPACE=$KUBE_NAMESPACE ENVIRONMENT=$ENVIRONMENT"
    APPLICATION=$APPLICATION IMAGE=$IMAGE KUBE_NAMESPACE=$KUBE_NAMESPACE ENVIRONMENT=$ENVIRONMENT bash ${CI_PROJECT_DIR}/${DEPLOY_SCRIPT}
  else
    echo "Skipping deploy step since ${CI_PROJECT_DIR}/${DEPLOY_SCRIPT} does not exist"
  fi
- kubectl get pods -n "$KUBE_NAMESPACE"

# Pipeline was triggered - check the branch
patch:
  stage: deploy
  environment:
    name: $ENVIRONMENT
  extends: [ .kube-context ]
  script:
  - APPLICATION=$UPSTREAM_PROJECT_NAME
  - *echo
  - *prepare
  - *cluster_patch
  rules:
  - if: '$PIPELINE_TRIGGERED == null'
    when: never
  - !reference [.build_vars, rules]


.deploy_applications: &deploy_applications
# Check if Container Image Exists, by setting IMAGE_EXISTS to 'true' or 'false'.
# via https://gitlab.com/gitlab-org/gitlab-foss/issues/26866#note_97609397
- mkdir -p ~/.docker
- "echo '{\"experimental\": \"enabled\"}' > ~/.docker/config.json"
- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
-  |
  for dir in ${CI_PROJECT_DIR}/applications/*/
  do
      APPLICATION=$(basename ${dir%*/})
      APP_REPO="${CI_REGISTRY}/${APPLICATION_NAMESPACE}/${APPLICATION}"
      IMAGE="${APP_REPO}/${REPO_SUB:-}${IMAGE_TYPE}"
      IMAGE_RELEASED="${APP_REPO}/${RELEASED}"
      echo IMAGE=$IMAGE, IMAGE_RELEASED=$IMAGE_RELEASED
      docker manifest inspect $IMAGE > /dev/null 2>&1 && IMAGE_EXISTS=0 || IMAGE_EXISTS=1
      echo $IMAGE, $IMAGE_EXISTS
      if [ $IMAGE_EXISTS -eq '1' ]; then
          docker manifest inspect $IMAGE_RELEASED > /dev/null 2>&1 && IMAGE_EXISTS=0 || IMAGE_EXISTS=1
          if [ $IMAGE_EXISTS -eq '0' ]; then IMAGE=$IMAGE_RELEASED; fi
      fi
      echo $IMAGE, $IMAGE_EXISTS
      echo "APPLICATION=$APPLICATION IMAGE=$IMAGE KUBE_NAMESPACE=$KUBE_NAMESPACE ENVIRONMENT=$ENVIRONMENT"
      if [ -f ${CI_PROJECT_DIR}/${DEPLOY_SCRIPT} ]; then
        echo "Running deploy step with APPLICATION=$APPLICATION IMAGE=$IMAGE KUBE_NAMESPACE=$KUBE_NAMESPACE ENVIRONMENT=$ENVIRONMENT ..."
        APPLICATION=$APPLICATION IMAGE=$IMAGE KUBE_NAMESPACE=$KUBE_NAMESPACE ENVIRONMENT=$ENVIRONMENT bash ${CI_PROJECT_DIR}/${DEPLOY_SCRIPT}
      else
        echo "Skipping deploy step since ${CI_PROJECT_DIR}/${DEPLOY_SCRIPT} does not exist"
      fi
  done
- kubectl get pods -n "$KUBE_NAMESPACE"

.prepare:
  stage: prepare
  extends: [.kube-context ]
  script:
  - *echo
  - *prepare
  artifacts:
    paths:
    - "${VARIABLES_FILE}" # To be able to pass data from prepare to deploy and other later stages
    expire_in: 10 day

.deploy:
  stage: deploy
  extends: [.kube-context ]
  script:
  - export ENVIRONMENT=$CI_ENVIRONMENT_NAME
  - echo CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH
  - echo CI_MERGE_REQUEST_SOURCE_BRANCH_NAME=$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME #for the feature, Application images are stored in the 'feature_name path
  - echo REPO_SUB=$REPO_SUB
  - *deploy_applications
  artifacts:
    paths:
    - ${CI_PROJECT_DIR}/applications/*/*.yaml
    - ${CI_PROJECT_DIR}/applications/*/*/*.yaml
    expire_in: 10 day

.demo_rules:
  rules:
  - if: $PIPELINE_TRIGGERED #exclude patching triggered
    when: never
  - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == "merge_request_event" #exclude when commit NOT to a main branch
    when: never

deploy_main:
  environment: demo
  rules:
  - !reference [.demo_rules, rules]
  - !reference [.build_vars, rules]
  extends: [.deploy ]

prepare_main:
  environment: demo
  rules:
  - !reference [.demo_rules, rules]
  - !reference [.build_vars, rules]
  extends: [.prepare ]

.mr_rules:
  rules:
  - if: $PIPELINE_TRIGGERED #exclude patching triggered
    when: never
  - if: #exclude when NOT a MR or MR not to the main branch; When merge request on app level, check for $CI_UPSTREAM_PIPELINE_SOURCE
    ($CI_PIPELINE_SOURCE != "merge_request_event" && $CI_UPSTREAM_PIPELINE_SOURCE != "merge_request_event") || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
    when: never

deploy_mr:
  environment: test
  rules:
  - !reference [.mr_rules, rules]
  - !reference [.build_vars, rules]
  extends: [.deploy ]

prepare_mr:
  environment: test
  rules:
  - !reference [.mr_rules, rules]
  - !reference [.build_vars, rules]
  extends: [.prepare ]

.dev_rules:
  rules:
  #  - if: '$KUBE_CONTEXT == null' - THIS does not work, limitation of Gitlab rules
  #    when: never
  - if: $PIPELINE_TRIGGERED #exclude patching triggered
    when: never
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH #exclude MR and demo
    when: never

deploy_dev:
  environment: development
  rules:
  - !reference [.dev_rules, rules]
  - !reference [.build_vars, rules]
  extends: [.deploy ]

prepare_dev:
  environment: development
  rules:
  - !reference [.dev_rules, rules]
  - !reference [.build_vars, rules]
  extends: [.prepare ]