#
# IMPORTANT: Do not rename this file or move to another folder. Doing so would
#            break the CI pipelines of projects that "include:" this file.
#
# Included Variables

include:
  .gitlab-ci-build-vars.yml

stages:
- vars
- deploy

variables:
  PROJECT_PATH: gcp-solutions/hcls/claims-modernization/gitlab-ci
  TRIGGER_FILE: .gitlab-ci-trigger-template.yml


#deploy mr:
#  stage: deploy
#  rules:
#  - if: $CI_MERGE_REQUEST_ID
#  trigger:
#    include:
#    - project: $DEPLOY_PROJECT
#      file: '.gitlab-ci.yml'


.create yaml: &create_yaml
  script:
  - echo CI_COMMIT_BRANCH = ${CI_COMMIT_BRANCH}, CI_MERGE_REQUEST_SOURCE_BRANCH_NAME = ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
  - cat ${VARIABLES_FILE}
  - source ${VARIABLES_FILE}
  - echo IMAGE = ${IMAGE}  ENVIRONMENT=${ENVIRONMENT} NAMESPACE=${NAMESPACE}
  - apk update
  - apk add git
  - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${DEPLOY_PROJECT}.git "$(basename ${DEPLOY_PROJECT})"
  - cd $(basename ${DEPLOY_PROJECT})
  - TRIGGER_BRANCH=`git remote show https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${DEPLOY_PROJECT}.git | grep 'HEAD branch' | cut -d' ' -f5`
  - if [[ ! -z ${CI_COMMIT_BRANCH} ]]; then CHECK_BRANCH=${CI_COMMIT_BRANCH}; fi
  - if [[ ! -z ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME} ]]; then CHECK_BRANCH=${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}; fi
  - |
    if [[ -z ${CHECK_BRANCH} ]]; then
      echo CHECK_BRANCH=$CHECK_BRANCH
      git ls-remote --heads origin ${CHECK_BRANCH}
      branch_exists_in_deploy=$(git ls-remote --heads origin ${CHECK_BRANCH})
      if [[ -z ${branch_exists_in_deploy} ]]; then
          TRIGGER_BRANCH=${CHECK_BRANCH}
      fi
    fi
  - echo TRIGGER_BRANCH=$TRIGGER_BRANCH
  - cd ..
  - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${PROJECT_PATH}.git "$(basename ${PROJECT_PATH})"
  - >
    sed  's|__PROJECT__|'"${DEPLOY_PROJECT}"'|g;
          s|__BRANCH__|'"${TRIGGER_BRANCH}"'|g;
          s|__IMAGE__|'"${IMAGE}"'|g;
          s|__UPSTREAM_PROJECT_NAME__|'"${CI_PROJECT_NAME}"'|g;
          s|__UPSTREAM_PROJECT_PATH__|'"${CI_PROJECT_PATH}"'|g;
          s|__ENVIRONMENT__|'"${ENVIRONMENT}"'|g;
          s|__NAMESPACE__|'"${NAMESPACE}"'|g;
    '
    $(basename ${PROJECT_PATH})/"${TRIGGER_FILE}" > ${TRIGGER_FILE}
  artifacts:
    paths:
    - ${TRIGGER_FILE}


use-build-results:
  stage: vars
  <<: *create_yaml

#get-latest-image:
#  stage: vars
#  rules:
#  - !reference [.build_rules, rules]
#  script:
#  - IMAGE = $IMAGE_LATEST
#  - echo "get-latest-image" BRANCH = ${CI_COMMIT_BRANCH}
#  <<: *create_yaml

# Workaround GitLab Limitation, cannot execute same way the flow on the MR
get-mr-image:
  stage: vars
  <<: *create_yaml
  rules:
  - if: $CI_MERGE_REQUEST_ID

deploy:
  stage: deploy
  trigger:
    include:
    - artifact: ${TRIGGER_FILE}
      job: get-mr-image
    strategy: depend
  rules:
  - if: $CI_MERGE_REQUEST_ID

execute:
  stage: deploy
  trigger:
    include:
    - artifact: ${TRIGGER_FILE}
      job: use-build-results
    strategy: depend

# Takes latest image which was just built and deploys to test environment. MR not supported
#deploy:
#  stage: deploy
#  trigger:
#    include:
#    - artifact: ${TRIGGER_FILE}
#      job: get-latest-image
#    strategy: depend
#  when: manual
